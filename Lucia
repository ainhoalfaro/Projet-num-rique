import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def grad_space(h1, h2):
    # Générer le maillage de distribution avec un pas h1
    x1 = np.arange(-10, 10, h1)
    y1 = np.arange(-10, 10, h1)
    z1 = np.arange(-10, 10, h1)
    X1, Y1, Z1 = np.meshgrid(x1, y1, z1)

    # Générer le maillage de représentation avec un pas h2
    x2 = np.arange(-10, 10, h2)
    y2 = np.arange(-10, 10, h2)
    z2 = np.arange(-10, 10, h2)
    X2, Y2, Z2 = np.meshgrid(x2, y2, z2)

    # Afficher les maillages
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X1, Y1, Z1, color='green', label=f'Maillage h1={h1}', s=10)  # Réduire la taille des points avec s=10
    ax.scatter(X2, Y2, Z2, color='blue', label=f'Maillage h2={h2}', s=10)   # Réduire la taille des points avec s=10
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.legend()
    plt.show()

# Test de la fonction
grad_space(1, 2)  # Test avec des pas h1=1 et h2=2




#version originale


import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def grad_space(h1, h2):
    # Générer le maillage de distribution avec un pas h1
    x1 = np.arange(-10, 10, h1)
    y1 = np.arange(-10, 10, h1)
    z1 = np.arange(-10, 10, h1)
    X1, Y1, Z1 = np.meshgrid(x1, y1, z1)

    # Générer le maillage de représentation avec un pas h2
    x2 = np.arange(-10, 10, h2)
    y2 = np.arange(-10, 10, h2)
    z2 = np.arange(-10, 10, h2)
    X2, Y2, Z2 = np.meshgrid(x2, y2, z2)

    # Afficher les maillages
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X1, Y1, Z1, color='green', label=f'Maillage h1={h1}')
    ax.scatter(X2, Y2, Z2, color='blue', label=f'Maillage h2={h2}')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.legend()
    plt.show()

# Test de la fonction
grad_space(1, 2)  # Test avec des pas h1=1 et h2=2






#NIVEAU 3

def calcul_composantes_vect(M, P):
    # Calculer les composantes du vecteur PM
    PM = [M[i] - P[i] for i in range(3)]
    return PM

def calcul_norme_vect(PM):
    # Calculer la norme du vecteur PM
    norme_PM = np.linalg.norm(PM)
    return norme_PM

# Test des sous-fonctions
M = [3, 4, 5]
P = [1, 1, 1]
PM = calcul_composantes_vect(M, P)
norme_PM = calcul_norme_vect(PM)
print("Composantes de PM:", PM)
print("Norme de PM:", norme_PM)



#NIVEAU 2
def calcul_potentiel(epsilon, norme_PM, q):
    # Calcul de la norme de PM
    norme_PM = np.linalg.norm(norme_PM)
    
    # Calcul du potentiel électrique au point M dû à la charge q
    V = q / (4 * np.pi * epsilon * norme_PM)
    return V

# Test de la fonction
epsilon = 8.85e-12  # Constante électrique en F/m

q = 1e-9  # Valeur de la charge en C (exemple)
potentiel = calcul_potentiel(epsilon, norme_PM, q)
print("Potentiel électrique calculé au point M:", potentiel, "V")




def calcul_champ_electrique(PM, q):
    # Calcul des composantes de PM
    x_PM, y_PM, z_PM = PM
    
    # Calcul de la norme de PM
    norme_PM = calcul_norme_vect(PM)
    
    # Calcul des composantes du champ électrique
    Ex = q * x_PM / (4 * np.pi * epsilon * norme_PM ** 3)
    Ey = q * y_PM / (4 * np.pi * epsilon * norme_PM ** 3)
    Ez = q * z_PM / (4 * np.pi * epsilon * norme_PM ** 3)
    
    return [Ex, Ey, Ez]

# Test de la fonction
PM = [1, 2, 3]  # Vecteur PM (exemple)
q = 1e-9  # Valeur de la charge en C (exemple)
epsilon = 8.85e-12  # Constante électrique en F/m
composantes_E = calcul_champ_electrique(PM, q)
print("Composantes du champ électrique:", composantes_E)
