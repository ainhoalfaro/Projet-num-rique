import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
 
#NIVEAU 4
#creation de la fonction qui calcule la composante PM

def calcul_composantes_vect(M, position):
    # Calculer les composantes du vecteur PM
    PM = [M[i] - position[i] for i in range(3)]
    return PM


#NIVEAU 3
import numpy as np

def calcul_norme_vect(PM):
    # calculer la norme du vecteur PM
    somme = 0
    for i in PM:
        somme += i** 2
    norme_PM = np.sqrt(somme)
    return norme_PM


#NIVEAU 2
def calcul_potentiel(epsilon, norme_PM, charge):
    # Calcul du potentiel électrique au point M dû à la charge q
    V = charge / (4 * np.pi * epsilon * norme_PM)
    return V

def calcul_champ_electrique(epsilon, norme_PM, charge, PM):
    # Calculer les composantes du champ électrique
    E_components =[ (comp * charge) / ((norme_PM ** 3) * (4 * np.pi * epsilon) )for comp in PM]
    # On utilise np.array pour assembler les composantes du vecteur dans un tableau numpy
    E = np.array(E_components)
    return E

# Test des sous-fonctions avec un point simple
M = [2, 2, 2]
P = ([1, 1, 1], 1e-9)
position=P[0]
charge=P[1]
epsilon = 8.85e-12 
PM = calcul_composantes_vect(M, P[0])
norme_PM = calcul_norme_vect(PM)
print("Composantes de PM:", PM)
print("Norme de PM:", norme_PM)

# Test de la fonction pour calculer le champ électrique et le potentiel

potentiel = calcul_potentiel(epsilon, norme_PM, charge)
print("Potentiel électrique calculé au point M:", potentiel, "V")


champ_electrique = calcul_champ_electrique(epsilon, norme_PM, charge, PM)
print("Champ électrique calculé au point M:", champ_electrique, "N/C") 


#MAILLAGE:
def maillage(h, N):
    maillage = []
    for i in range(N):
        maillage.append([])
        for j in range(N):
            maillage[i].append([])
            for k in range(N):
                maillage[i][j].append((i * h, j * h, k * h))
    return maillage

maillage_M = maillage(h, N)
maillage_P = maillage(h, N)
